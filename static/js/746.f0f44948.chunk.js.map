{"version":3,"file":"static/js/746.f0f44948.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx","services/api.jsx"],"sourcesContent":["import { useLocation, Link } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n// import {\n//   List,\n//   Item,\n//   SectionTitle,\n//   LinkTitle,\n//   Img,\n//   MovieTitle,\n// } from './MoviesList.styled';\n\nconst MoviesList = ({ movies, sectionTitle = null }) => {\n  const location = useLocation();\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w342/';\n  const defaultImg = '/public/images/film_poster_not_found.jpg';\n\n  return (\n    <>\n      {sectionTitle && <h3>{sectionTitle}</h3>}\n      <ul>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <li key={id}>\n              <Link state={{ from: location }} to={`{movies.id}`}>\n                <img\n                  src={poster_path ? `${baseImgUrl}${poster_path}` : defaultImg}\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ),\n  sectionTitle: PropTypes.string,\n};\n","import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport PropTypes from 'prop-types';\n\n// import { Form, Input, Button } from './SearchBar.styled.jsx';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const changeHandler = event => {\n    const { value } = event.target;\n    setQuery(value);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    if (query === '') {\n      Notify.failure(`Please enter the film name`, {\n        position: 'center-top',\n        width: '300px',\n        fontSize: '14px',\n        failure: {\n          background: '#a55555',\n        },\n      });\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form onSubmit={submitHandler}>\n        <input\n          onChange={changeHandler}\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          autoComplete=\"off\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovieByQuery } from '../../services/api';\n\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport MoviesList from '../../components/MoviesList/MoviesList';\n\n// import { Section, Container } from './Movies.styled.jsx';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const params = searchParams.get('query') ?? '';\n    if (params?.trim()) {\n      searchMovieByQuery(params).then(films => {\n        if (films.length !== 0) {\n          setSearchMovies(films);\n        } else {\n          alert('no movies found');\n        }\n      });\n    }\n  }, [searchParams]);\n\n  const onSubmitHandler = q => {\n    setSearchParams({ query: q });\n  };\n\n  return (\n    <section>\n      <container>\n        {/* <h1>Movies</h1> */}\n        <SearchBar onSubmit={onSubmitHandler} />\n        {searchMovies.length > 0 && <MoviesList movies={searchMovies} />}\n      </container>\n    </section>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '894a5fcb5eb3af426933275e70f0cd83';\n\nexport const trendingMovies = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}&page=1`);\n  return results;\n};\n\nexport const searchMovieByQuery = async query => {\n  const {\n    data: { results },\n  } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&page=1`);\n  return results;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\nexport const fetchMovieGenre = async () => {\n  const { genres } = await axios.get(`/genre/movie/list?api_key=${API_KEY}`);\n  return genres;\n};\n"],"names":["movies","sectionTitle","location","useLocation","map","id","title","poster_path","state","from","to","src","alt","onSubmit","useState","query","setQuery","event","preventDefault","Notify","position","width","fontSize","failure","background","onChange","value","target","type","name","autoComplete","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","useEffect","params","get","trim","searchMovieByQuery","then","films","length","alert","q","MoviesList","axios","API_KEY","trendingMovies","results","data","fetchMovieById","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}