{"version":3,"file":"static/js/reviews-subpage.7c7f9761.chunk.js","mappings":"qPAEaA,EAAUC,EAAAA,GAAAA,GAAH,6CAIPC,EAAUD,EAAAA,GAAAA,GAAH,4FAMPE,EAAUF,EAAAA,GAAAA,EAAH,oFAMPG,EAAWH,EAAAA,GAAAA,GAAH,kE,SCarB,EAzBgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBH,GAASI,MAAK,SAAAC,GAC9BN,EAAWM,EAAMC,QAClB,GACF,GAAE,CAACN,IAEJ,IAAMO,EAAOT,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACvB,UAACjB,EAAD,YACE,UAACC,EAAD,YACE,mCACCe,KAEFC,IALWF,EADS,IASzB,OAAOX,EAAQc,OAAS,GACtB,UAACpB,EAAD,eAAWe,MAEX,SAACX,EAAD,iDAEH,C,+LC5BDiB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,sGAGlBF,EAAAA,EAAAA,IAAA,sCAAyCC,EAAzC,YAHkB,uBAElBR,EAFkB,EAE1BU,KAAQV,QAFkB,kBAIrBA,GAJqB,2CAAH,qDAOdW,EAAkB,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACTN,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACqBI,EADrB,iBACmCC,IAF1B,uBACxBH,EADwB,EACxBA,KADwB,kBAIzBA,GAJyB,2CAAH,sDAOlBI,EAAc,mCAAG,WAAMX,GAAN,yFACLI,EAAAA,EAAAA,IAAA,iBACXJ,EADW,oBACGK,EADH,oBADK,uBACpBE,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdK,EAAc,mCAAG,WAAMZ,GAAN,yFACLI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,4BAA0CK,IADrC,uBACpBE,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdb,EAAiB,mCAAG,WAAMM,GAAN,yFACRI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,4BAA0CK,IADlC,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RevList = styled.ul`\n  margin-top: 20px;\n`;\n\nexport const RevItem = styled.li`\n  /* &:not(: last-of-type) { */\n  margin-bottom: 30px;\n  /* } */\n`;\n\nexport const RevText = styled.p`\n  margin-bottom: 10px;\n  color: #fff;\n  font-size: 16px;\n`;\n\nexport const RevError = styled.h3`\n  margin: 20px auto;\n  font-size: 16px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/api';\n\nimport { RevList, RevItem, RevText, RevError } from './Reviews.styled.jsx';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieReviews(movieId).then(items => {\n      setReviews(items.results);\n    });\n  }, [movieId]);\n\n  const rews = reviews.map(({ id, author, content }) => (\n    <RevItem key={id}>\n      <RevText>\n        <b>Author:</b>\n        {author}\n      </RevText>\n      {content}\n    </RevItem>\n  ));\n  return reviews.length > 0 ? (\n    <RevList> {rews}</RevList>\n  ) : (\n    <RevError>There are no reviews for this movie</RevError>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '894a5fcb5eb3af426933275e70f0cd83';\n\nexport const trendingMovies = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}&page=1`);\n  return results;\n};\n\nexport const searchMovieByQuery = async (query, page = 1) => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\nexport const fetchMovieGenre = async () => {\n  const { genres } = await axios.get(`/genre/movie/list?api_key=${API_KEY}`);\n  return genres;\n};\n"],"names":["RevList","styled","RevItem","RevText","RevError","useState","reviews","setReviews","movieId","useParams","useEffect","fetchMovieReviews","then","items","results","rews","map","id","author","content","length","axios","API_KEY","trendingMovies","data","searchMovieByQuery","query","page","fetchMovieById","fetchMovieCast"],"sourceRoot":""}